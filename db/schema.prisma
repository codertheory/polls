// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions", "selectRelationCount"]
}

// --------------------------------------
enum Role {
  USER
  ADMIN
}

model User {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           Role     @default(USER)

  tokens   Token[]
  sessions Session[]
  polls    Poll[]
  votes    PollVote[]
}

model Session {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql

enum TokenType {
  RESET_PASSWORD
}

model Poll {
  id          String        @id @default(cuid())
  name        String
  description String?
  creator     User?         @relation(fields: [creatorId], references: [id])
  creatorId   String?
  options     PollOptions[]
  votes       PollVote[]
}

model PollOptions {
  id     String     @id @default(cuid())
  option String
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String
  votes  PollVote[]
}

model PollVote {
  id       String      @id @default(cuid())
  poll     Poll        @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId   String
  option   PollOptions @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId String
  ip       String?
  metadata Json
  user     User?       @relation(fields: [userId], references: [id])
  userId   String?
}
